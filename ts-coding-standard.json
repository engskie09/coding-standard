{
  "title": "TypeScript Coding Standard",
  "rule-categories": [
    {
      "name": "import alignment - these rules are for import part of codebase only for each .ts files",
      "rules": [
        "Keep all imports regardless of usage.",
        "Sort external imports using the priority order defined under 'dependency sort priority'. Modules listed earlier in the list must appear before others. Any modules not listed are sorted alphabetically after prioritized ones.",
        "Group internal (aliased @/) imports by their alias root directory and sort them each group and seperated by single space, defined under 'aliased @/ sort priority'",
        "Combine type and non-type imports from the same module into separate statements only if required by their export structure.",
        "Declaration-style dynamic imports (e.g., `const foo = import('bar')...`) must appear after all static import statements.",
        "Place relative imports (e.g., './', '../') last and sort them alphabetically by path.",
        "Split 'import type' and regular 'import' statements according to exported members in the source.",
        "'import type' must come before 'import' for the same source file. and if they are in the same path, the 'import type' would be on top if the 'import' of the same directory file",
        "Within each import statement, sort imported members inside { } alphabetically and remove any unnecessary commas.",
        "Treat scoped external packages (e.g., '@foo/bar') as external imports."
      ],
      "dependency sort priority": [
        "express",
        "mongoose",
        "class-transformer",
        "class-validator"
      ],
      "aliased @/ sort priority": [
        "@/model",
        "@/router",
        "@/service",
        "@/util"
      ]
    }
  ]
}